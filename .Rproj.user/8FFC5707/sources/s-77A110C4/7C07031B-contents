---
title: "R语言入门（内部资料）"
author: "Genowis::魏博"
date: "2018-01-19"
output:
  revealjs::revealjs_presentation:
    theme: default
    highlight: default
    center: true
    transition: slide
---

# 背景介绍

## 起源

```
R is a language and environment for statistical computing and graphics. It is a GNU project which is similar to the S 
language and environment which was developed at Bell Laboratories (formerly AT&T, now Lucent Technologies) by John Chambers 
and colleagues.
```

- 1980年，源于S语言，新西兰奥克兰大学
- 统计计算和图形化

![](figures/poll.jpg)


## 优点：

- 免费，开源
- 面向统计分析
- 简单易学
- 可视化非常好
- 完整生态的开发流程
- 社区逐渐扩大


## 缺点：

- 基于缓存的数据加载
- 运算效率低，对超大数据支持不力
- 国内普及度不高


# 数据类型

## 常用类型


```{r,eval=F}
- 字符character: "a", "1", "apple", "@"
```

```{r,eval=F}
- 数值numeric: 1, 3.14, 100, 2e10
```

 
```{r,eval=F}
- 整数integer: 1, 2, 500
```


```{r,eval=F}
- 因子factor: 肝细胞癌（1），肝内胆管癌（2）
```
 
```{r,eval=F}
- 逻辑logical: TRUE, FALSE
```

```{r,eval=F}
- 日期date: 2018-01-19, 19/1/2018
```
# 数据结构

## 常用结构

```{r,eval=F}
- 向量vector: c(1,2,3)，c("a","b","c"), 1:10
```

```{r,eval=F}
- 列表list: list(1,2,3)，list(a="A",b="B",c="C",d=1)
```

```{r,eval=F}
- 矩阵/数组matrix/array: matrix(c(1,2,3,4),ncol=2)
```

```{r,eval=F}
- 数据框data.frame: data.frame(ID=c(1,2,3), 血型=c("A","B","A"))
```
# 函数

## 基本构成

```{r,eval=F}
- 函数名：mean(), get_IHC()
```

```{r,eval=F}
- 函数体: 通过body(函数名)查看
```

```{r,eval=F}
- 参数：get_IHC(x, y) 其中x表示文本，y表示要提取的IHC指标
```

## 基本语法

```{r,eval=F}
函数名=function(参数){
  运算逻辑
}

```


```{r}
func=function(x,y){
  return(x/(y+1))
}

func(1,1)
```




# 基础运算（向量化）

## 算数运算

- +，*， /

```{r}
1:10+2
9/(1:3)-0.5
```

## 统计运算

- mean()，max()，min()，quantile()，sum()，summary()

```{r}
summary(rnorm(100))
```

## 逻辑运算

- &, |, !

```{r}
!(2>1 | 2>3)
```

## 字符串操作

- paste(), grep()，grepl(), strsplit()， strsub()
```{r}
tmp=paste(c(1:10),"163.com",sep="@")
unlist(strsplit(tmp,split="@"))[seq(1,20,2)]
```

## 数据表操作
- subset(), merge(), dim(), names()

```{r}
df=data.frame(x=1:10,y=rep("a",10),stringsAsFactors = F)
dim(subset(df,x>5))
```
## 绘图命令

- plot()，adline()，hist()
```{r,fig.height=5}
hist(rnorm(100))
abline(a=15,b=0)
```


# 流程控制

## 常用控制

- for, if... else, while, repeat, break, next

```{r}
for ( i in 1:20) {
  
  if (i %% 2==0){
    print(paste(i,"是偶数",sep=""))
  }
  else {
    next
  }
}
```


# 程序包

## 安装

CRAN: The Comprehensive R Archive Network

```{r,eval=F}
install.packages("ggplot2")
```

## 加载

```{r}
library(ggplot2)
```

## 调用函数

```{r,fig.height=5}
ggplot(iris,aes(x=Petal.Length,y=Petal.Width,color=Species))+geom_point()
```

## 常用程序包

- 字符串处理：stringr
- 数据表处理： dplyr, data.table
- 爬虫：rvest
- 绘图：ggplot2
- web开发: shiny, htmlwidget
- 机器学习：princomp, jiebaR, cluster, e1071, randomForest, xgboost, tensorflow, keras, mxnet 
- 文档编写：rmarkdown, knitr

# 编程环境

## Rstudio

![](figures/rstudio.jpg)

相关[连接](https://www.rstudio.com/products/RStudio/)


## Jupyter

```
conda install -c r r-essentials
```

![](figures/jupyter.png)

相关[连接](https://www.anaconda.com/developer-blog/jupyter-and-conda-r/)


# 行业应用

## 1. 生存分析

```{r,eval=F}
library("survival")
library("survminer")
fit <- survfit(Surv(time,status) ~ sex, data = lung)
ggsurvplot(fit, data = lung, conf.int = TRUE, pval = TRUE, fun = "pct", risk.table = TRUE, size = 1,
           linetype = "strata", palette = c("#E7B800","#2E9FDF"), legend = "bottom", legend.title = "Sex",
           legend.labs = c("Male","Female"))
```

![](figures/surv.png)


## 2. 机器学习

经典机器学习--xgboost（倚天剑）

```{r}
library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
bst <- xgboost(data = train$data, label = train$label, max_depth = 2, eta = 1,
nrounds = 5, objective = "binary:logistic")
pred <- predict(bst, test$data)
table(pred = ifelse(pred>0.5,1,0), true = test$label)
```

***

经典机器学习--SVM （屠龙刀）

```{r,message=F}
library(e1071)
library(SparseM)
svm.model <- svm(x=as.matrix.csr(train$data,ncol=126),y=train$label, 
                 cost = 100, gamma = 1)
svm.pred  <- predict(svm.model, as.matrix.csr(test$data,ncol=126))
table(pred = ifelse(svm.pred>0.5,1,0), true = test$label)
```
***

深度学习（吸星大法）

- TensorFlow: https://tensorflow.rstudio.com/
- Keras: https://keras.rstudio.com/
- MXNET: https://mxnet.incubator.apache.org/api/r/index.html
- H2O：https://www.h2o.ai/


[余光中诗作深度学习生成器](https://github.com/chriswweibo/yuguangzhong)

![](figures/ygz.jpg)

***

keras示例

```{r,message=F}
library(keras)
model <- keras_model_sequential()  %>% 
  layer_dense(units = 256, activation = 'relu', input_shape = c(126)) %>% 
  layer_dropout(rate = 0.4) %>% 
  layer_dense(units = 32, activation = 'relu') %>%
  layer_dropout(rate = 0.3) %>%
  layer_dense(units = 2, activation = 'sigmoid') %>% 
  compile(loss = 'categorical_crossentropy',optimizer = optimizer_rmsprop(),
  metrics = c('accuracy'))

history <- model %>% fit(
  train$data, to_categorical(train$label), 
  epochs = 50, validation_split = 0.2
)
```

***

```{r,echo=F}
plot(history)

```


## 3. web开发

DataWiz: http://192.168.75.180:5678/

![](figures/datawiz.png)

[CRAN程序包实时下载情况](https://jjallaire.shinyapps.io/shiny-crandash/)


## 4. 网络爬虫

医脉通指南！

```{r,eval=F}
library(rvest)
library(magrittr)
library(stringr)
guide=list()
g_url=list()
for (i in 1:41) {
  page=paste("http://www.medlive.cn/cancer/guideline/?type=cn_guide&page=",i,sep="")
  cand=read_html(page) %>% 
    html_nodes(".info a")
  guide[[i]]= html_text(cand) %>% unlist()
  
  g_url[[i]]=str_extract(cand,pattern="http.*\"") %>% 
    str_replace_all(pattern="\"",replacement = "") %>% unlist()
  setTxtProgressBar(txtProgressBar(min=0,max=1,style=3),value=i/41)
  }
tmp=data.frame(guide=unlist(guide),url=unlist(g_url),stringsAsFactors = F)
write.csv(tmp,"D://news4tumor/guide.csv")
```

## 5. 可视化
静态可视化

![](figures/viz1.png)


***

交互可视化

<style>
.column-left{
  float: left;
  width: 40%;
  text-align: left;
}
.column-right{
  float: right;
  width: 60%;
  text-align: left;
}
</style>

<div class="column-left">

![](figures/viz2.gif)

</div>

<div class="column-right">

```{r,echo=F,warning=F}
library(canvasXpress)
  y=read.table("http://www.canvasxpress.org/data/cX-circular2-dat.txt", header=TRUE, sep="\t", quote="", row.names=1, fill=TRUE, check.names=FALSE, stringsAsFactors=FALSE)
  x=read.table("http://www.canvasxpress.org/data/cX-circular2-smp.txt", header=TRUE, sep= "\t", quote="", row.names=1, fill=TRUE, check.names=FALSE, stringsAsFactors=FALSE)
  z=read.table("http://www.canvasxpress.org/data/cX-circular2-var.txt", header=TRUE, sep= "\t", quote="", row.names=1, fill=TRUE, check.names=FALSE, stringsAsFactors=FALSE)
  canvasXpress(
    data=y,
    smpAnnot=x,
    varAnnot=z,
    colorScheme="basic",
    connections=list(list("rgb(0,0,255)", "setosa", 42, "versicolor", 35, 1, 2), list("rgb(0,255,0)", "virginica", 26, "versicolor", 15, 4, 8), list("rgb(120,0,255)", "setosa", 36, "virginica", 5, 6, 9), list("rgb(0,40,255)", "versicolor", 9, "versicolor", 18, 2, 5), list("rgb(80,0,55)", "versicolor", 14, "setosa", 9, 3, 4), list("rgb(0,55,140)", "setosa", 12, "setosa", 41, 5, 2), list("rgb(255,0,0)", "virginica", 25, "setosa", 3, 2, 6)),
    graphType="Circular",
    rAxis="Number",
    ringsWeight=list(25, 25, 25, 25),
    segregateSamplesBy=list("Species"),
    segregateVariablesBy=list("Ring"),
    showTransition=TRUE,
    title="Iris flower data set (2D Circular Plot)",
    transitionStep=50,
    transitionTime=1500
  )
```
</div>

***

```{r,message=F,echo=F,warning=F,fig.height=100}
library(tidyverse)
library(rwars)
library(highcharter)
swmovies <- get_all_films()

swdata <- map_df(swmovies$results, function(x){
  data_frame(
    movie = x$title,
    species = length(x$species),
    planets = length(x$planets),
    characters = length(x$characters),
    vehicles = length(x$vehicles),
    release = x$release_date
  )
}) 

swdata <- gather(swdata, key, number, -movie, -release) %>% 
  arrange(release)

hchart(swdata, "line", hcaes(x = movie, y = number, group = key),
       color = c("#e5b13a", "#4bd5ee", "#4AA942", "#FAFAFA")) %>% 
  hc_title(
    text = "Diversity in <span style=\"color:#e5b13a\"> STAR WARS</span> movies",
    useHTML = TRUE) %>% 
  hc_tooltip(table = TRUE, sort = TRUE) %>% 
  hc_credits(
    enabled = TRUE,
    text = "Source: SWAPI via rwars package",
    href = "https://swapi.co/") %>% 
  hc_add_theme(
    hc_theme_flatdark(
      chart = list(
        backgroundColor = "transparent",
        divBackgroundImage = "http://www.wired.com/images_blogs/underwire/2013/02/xwing-bg.gif"
      )
    )
  )
```

***

```{r,echo=F, message=F,warning=F}
library(rbokeh)
# prepare data
elements <- subset(elements, !is.na(group))
elements$group <- as.character(elements$group)
elements$period <- as.character(elements$period)

# add colors for groups
metals <- c("alkali metal", "alkaline earth metal", "halogen",
  "metal", "metalloid", "noble gas", "nonmetal", "transition metal")
colors <- c("#a6cee3", "#1f78b4", "#fdbf6f", "#b2df8a", "#33a02c",
  "#bbbb88", "#baa2a6", "#e08e79")
elements$color <- colors[match(elements$metal, metals)]
elements$type <- elements$metal

# make coordinates for labels
elements$symx <- paste(elements$group, ":0.1", sep = "")
elements$numbery <- paste(elements$period, ":0.8", sep = "")
elements$massy <- paste(elements$period, ":0.15", sep = "")
elements$namey <- paste(elements$period, ":0.3", sep = "")

# create figure
p <- figure(title = "Periodic Table", tools = c("resize", "hover"),
  ylim = as.character(c(7:1)), xlim = as.character(1:18),
  xgrid = FALSE, ygrid = FALSE, xlab = "", ylab = "",
  height = 445, width = 800) %>%

# plot rectangles
ly_crect(group, period, data = elements, 0.9, 0.9,
  fill_color = color, line_color = color, fill_alpha = 0.6,
  hover = list(name, atomic.number, type, atomic.mass,
    electronic.configuration)) %>%

# add symbol text
ly_text(symx, period, text = symbol, data = elements,
  font_style = "bold", font_size = "10pt",
  align = "left", baseline = "middle") %>%

# add atomic number text
ly_text(symx, numbery, text = atomic.number, data = elements,
  font_size = "6pt", align = "left", baseline = "middle") %>%

# add name text
ly_text(symx, namey, text = name, data = elements,
  font_size = "4pt", align = "left", baseline = "middle") %>%

# add atomic mass text
ly_text(symx, massy, text = atomic.mass, data = elements,
  font_size = "4pt", align = "left", baseline = "middle")

p

```


***

3D可视化


```{r,message=F,warning=F,echo=F}
library(threejs)
data(ego)
graphjs(ego, bg="black",width =800, height = 600)
```

***

```{r,echo=F}
library(threejs)
data(flights)
dest   <- factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
freq <- sort(table(dest), decreasing=TRUE)
frequent_destinations <- names(freq)[1:10]
idx <- dest %in% frequent_destinations
frequent_flights <- flights[idx, ]
latlong <- unique(frequent_flights[,3:4])
earth <- system.file("images/world.jpg",  package="threejs")
globejs(img=earth, lat=latlong[,1], long=latlong[,2], arcs=frequent_flights,
        arcsHeight=0.3, arcsLwd=2, arcsColor="#ffff00", arcsOpacity=0.15,
        atmosphere=TRUE)
```

***

表中可视化

```{r,echo=F,message=F,warning=F}
df <- data.frame(
  id = 1:10,
  name = c("Bob", "Ashley", "James", "David", "Jenny", 
    "Hans", "Leo", "John", "Emily", "Lee"), 
  age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
  grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
  test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
  test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
  final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
  registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
  stringsAsFactors = FALSE)

library(formattable)

formattable(df[1:6,], list(
  age = color_tile("white", "orange"),
  grade = formatter("span", style = x ~ ifelse(x == "A", 
    style(color = "green", font.weight = "bold"), NA)),
  area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
  final_score = formatter("span",
    style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
    x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
  registered = formatter("span",
    style = x ~ style(color = ifelse(x, "green", "red")),
    x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
```

***

行内可视化

```{r,echo=F,message=F,warning=F}
library(htmlwidgets)
library(sparkline)
set.seed(1234)
x = rnorm(10)
y = rnorm(10)
```


- 行内线图： `r sparkline(x)`，
- 柱状图`r sparkline(abs(x), type = 'bar')`，
- 负值情况： `r sparkline(x, type = 'bar')`

表内图：

| Stock | Sparkline         | Boxplot  
|-------|-------------------|--------
| x     | `r sparkline(x)`  | `r sparkline(x, type ='box')`
| y     | `r sparkline(y)`  | `r sparkline(y, type ='box')`




# 基础内容速查

##

![](figures/cheatsheet1.png)


##

![](figures/cheatsheet2.png)

# 谢谢

